Use as sequências de escape de caractere quando precisar inserir um caractere especial em uma cadeia de caracteres literal, como uma tabulação \t, uma nova linha \n ou uma aspa dupla \".


Use um caractere de escape para a barra invertida \\ quando precisar usar uma barra invertida em todos os outros cenários.
Use a diretiva @ para criar um literal de cadeia de caracteres que mantenha toda a formatação de espaço em branco e caracteres de barra invertida em uma cadeia de caracteres.
Use o \u mais um código de quatro caracteres para representar caracteres Unicode (UTF-16) em uma cadeia de caracteres.


Os caracteres Unicode podem não ser impressos corretamente dependendo do aplicativo.
A concatenação de cadeia de caracteres permite combinar cadeias de caracteres literais menores e variáveis em uma única cadeia de caracteres.
Evite criar variáveis intermediárias se adicioná-las não aumentar a legibilidade.


==, o operador "igual" para testar a igualdade
>, o operador "maior que", para testar se o valor à esquerda é maior que o valor à direita
<, o operador "menor que", para testar se o valor à esquerda é menor que o valor à direita
>=, o operador "maior ou igual a"
<=, o operador "menor ou igual a"


Use a instrução foreach para iterar em cada elemento de uma matriz, executando o bloco de código associado uma vez para cada elemento da matriz.
A instrução foreach define o valor do elemento atual na matriz como uma variável temporária, que pode ser usada no corpo do bloco de código.
Use o operador de incremento ++ para adicionar 1 ao valor atual de uma variável.


O tipo de dados string, cadeias de caracteres literais e variáveis do tipo String implementam muitos métodos auxiliares para formatar, modificar e executar outras operações nas cadeias de caracteres.
Os métodos PadLeft() e PadRight() adicionam espaço em branco (ou, opcionalmente, outro caractere) ao comprimento total de uma cadeia de caracteres.
Use PadLeft() para alinhar uma cadeia de caracteres à direita.
Alguns métodos são sobrecarregados, o que significa que eles têm várias versões do método com diferentes argumentos que afetam sua funcionalidade.
O operador += concatena uma nova cadeia de caracteres à direita para a cadeia de caracteres existente à esquerda.


O método Remove() funciona como o método Substring(), com a diferença de que ele exclui os caracteres especificados na cadeia de caracteres.
O método Replace() troca todas as instâncias de uma cadeia de caracteres por uma nova cadeia de caracteres.


As variáveis podem ser categorizadas como tipos de valor e tipos de referência.
Os tipos de valor contêm valores diretamente e os tipos de referência armazenam o endereço do valor.
Métodos que usam argumentos de tipo de valor criam a própria cópia dos valores.
Métodos que executam alterações em um parâmetro de matriz afetam a matriz de entrada original.
A cadeia de caracteres é um tipo de referência imutável.
Os métodos que executam alterações em um parâmetro de cadeia de caracteres não afetam a cadeia de caracteres original.



A depuração de código é uma habilidade crucial no processo de desenvolvimento de software que todos os desenvolvedores aprendem.
A melhor abordagem para depurar seus aplicativos é usar um depurador, não reler o código cinco vezes ou adicionar instruções console.WriteLine() em todo o código.
Os depuradores permitem pausar seu aplicativo, percorrer o código linha por linha e observar o estado das variáveis e dos parâmetros de função.


As exceções são usadas no C# para propagar erros em runtime e são representadas por classes derivadas da classe Exception.
As exceções são geradas pelo código que encontra um erro e capturadas pelo código que pode corrigir o erro.
Quando uma exceção é capturada, o código pode acessar o conteúdo dela e executar uma ação corretiva para atenuar o erro.
O runtime do .NET gera exceções quando detecta um erro e a exceção contém informações sobre o tipo de erro ocorrido.


A interface do usuário do Visual Studio Code pode ser usada para configurar, iniciar e gerenciar as sessões de depuração. O arquivo launch.json contém as configurações de inicialização do aplicativo.
O menu Executar fornece acesso fácil a comandos comuns de execução e depuração agrupados em seis seções.
A exibição EXECUTAR E DEPURAR fornece acesso a ferramentas de runtime, incluindo o painel de controles Execução e Depuração. As seções da exibição EXECUÇÃO E DEPURAÇÃO são VARIÁVEIS, INSPEÇÃO, PILHA DE CHAMADAS e PONTOS DE INTERRUPÇÃO.
A barra de ferramentas Depuração fornece controles de execução enquanto o aplicativo está em execução, como pausar/continuar, depuração parcial, intervir, depuração circular, reiniciar e parar.
O CONSOLE DE DEPURAÇÃO é usado para exibir mensagens do depurador. O CONSOLE DE DEPURAÇÃO também pode exibir a saída do console do aplicativo.


O Visual Studio Code permite a configuração de pontos de interrupção no editor de código ou no menu Executar. As linhas de código do ponto de interrupção são marcadas com um ponto vermelho à esquerda do número de linha.
Os pontos de interrupção podem ser removidos ou desabilitados com as mesmas opções usadas para defini-los. As operações em massa que afetam todos os pontos de interrupção estão disponíveis no menu Executar.
Os pontos de interrupção condicionais podem ser usados para pausar a execução quando uma condição especificada é atendida ou quando uma “contagem de ocorrências” é alcançada.
Os logpoints podem ser usados para registrar informações no terminal sem pausar a execução ou inserir código.
